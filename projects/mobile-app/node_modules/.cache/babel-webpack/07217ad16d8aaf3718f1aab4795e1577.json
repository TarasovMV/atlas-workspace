{"ast":null,"code":"import _asyncToGenerator from \"/Users/avsv/Documents/GitHub/atlas-workspace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport { Keyboard, KeyboardStyle, KeyboardResize } from '@capacitor/keyboard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class KeyboardService {\n  constructor(router) {\n    this.router = router;\n    this.keyboardHeight$ = new BehaviorSubject(0);\n    this.routesWithCoveredKeyboard = ['/auth'];\n  }\n\n  setInitSettings(platform, appWindow) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!appWindow) {\n        return;\n      }\n\n      try {\n        _this.actionListeners(platform, appWindow);\n\n        yield Keyboard.setStyle({\n          style: KeyboardStyle.Light\n        });\n        yield Keyboard.setResizeMode({\n          mode: KeyboardResize.None\n        });\n      } catch (_a) {}\n    })();\n  }\n\n  actionListeners(platform, appWindow) {\n    Keyboard.addListener('keyboardWillShow', event => this.keyboardHeight$.next(event.keyboardHeight));\n    Keyboard.addListener('keyboardWillHide', () => this.keyboardHeight$.next(0));\n    this.keyboardHeight$.subscribe(height => {\n      appWindow.el.style = `height: calc(100vh - ${height}px)`;\n\n      if (!this.routesWithCoveredKeyboard.includes(this.router.url)) {\n        setTimeout(() => {\n          var _a;\n\n          return (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }, 300);\n      }\n    });\n  }\n\n}\n\nKeyboardService.ɵfac = function KeyboardService_Factory(t) {\n  return new (t || KeyboardService)(i0.ɵɵinject(i1.Router));\n};\n\nKeyboardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KeyboardService,\n  factory: KeyboardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/avsv/Documents/GitHub/atlas-workspace/projects/mobile-app/src/app/core/services/platform/keyboard.service.ts"],"names":["BehaviorSubject","Keyboard","KeyboardStyle","KeyboardResize","i0","i1","KeyboardService","constructor","router","keyboardHeight$","routesWithCoveredKeyboard","setInitSettings","platform","appWindow","actionListeners","setStyle","style","Light","setResizeMode","mode","None","_a","addListener","event","next","keyboardHeight","subscribe","height","el","includes","url","setTimeout","document","activeElement","scrollIntoView","behavior","ɵfac","KeyboardService_Factory","t","ɵɵinject","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,eAAT,QAAgC,MAAhC;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,cAAlC,QAAwD,qBAAxD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,eAAL,GAAuB,IAAIT,eAAJ,CAAoB,CAApB,CAAvB;AACA,SAAKU,yBAAL,GAAiC,CAAC,OAAD,CAAjC;AACH;;AACKC,EAAAA,eAAe,CAACC,QAAD,EAAWC,SAAX,EAAsB;AAAA;;AAAA;AACvC,UAAI,CAACA,SAAL,EAAgB;AACZ;AACH;;AACD,UAAI;AACA,QAAA,KAAI,CAACC,eAAL,CAAqBF,QAArB,EAA+BC,SAA/B;;AACA,cAAMZ,QAAQ,CAACc,QAAT,CAAkB;AAAEC,UAAAA,KAAK,EAAEd,aAAa,CAACe;AAAvB,SAAlB,CAAN;AACA,cAAMhB,QAAQ,CAACiB,aAAT,CAAuB;AAAEC,UAAAA,IAAI,EAAEhB,cAAc,CAACiB;AAAvB,SAAvB,CAAN;AACH,OAJD,CAKA,OAAOC,EAAP,EAAW,CACV;AAVsC;AAW1C;;AACDP,EAAAA,eAAe,CAACF,QAAD,EAAWC,SAAX,EAAsB;AACjCZ,IAAAA,QAAQ,CAACqB,WAAT,CAAqB,kBAArB,EAA0CC,KAAD,IAAW,KAAKd,eAAL,CAAqBe,IAArB,CAA0BD,KAAK,CAACE,cAAhC,CAApD;AACAxB,IAAAA,QAAQ,CAACqB,WAAT,CAAqB,kBAArB,EAAyC,MAAM,KAAKb,eAAL,CAAqBe,IAArB,CAA0B,CAA1B,CAA/C;AACA,SAAKf,eAAL,CAAqBiB,SAArB,CAAgCC,MAAD,IAAY;AACvCd,MAAAA,SAAS,CAACe,EAAV,CAAaZ,KAAb,GAAsB,wBAAuBW,MAAO,KAApD;;AACA,UAAI,CAAC,KAAKjB,yBAAL,CAA+BmB,QAA/B,CAAwC,KAAKrB,MAAL,CAAYsB,GAApD,CAAL,EAA+D;AAC3DC,QAAAA,UAAU,CAAC,MAAM;AAAE,cAAIV,EAAJ;;AAAQ,iBAAO,CAACA,EAAE,GAAGW,QAAQ,CAACC,aAAf,MAAkC,IAAlC,IAA0CZ,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACa,cAAH,CAAkB;AAAEC,YAAAA,QAAQ,EAAE;AAAZ,WAAlB,CAA1E;AAAsH,SAAvI,EAAyI,GAAzI,CAAV;AACH;AACJ,KALD;AAMH;;AA3BwB;;AA6B7B7B,eAAe,CAAC8B,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIhC,eAAV,EAA2BF,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,MAAf,CAA3B,CAAP;AAA4D,CAAzH;;AACAlC,eAAe,CAACmC,KAAhB,GAAwB,aAAcrC,EAAE,CAACsC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,eAAT;AAA0BsC,EAAAA,OAAO,EAAEtC,eAAe,CAAC8B,IAAnD;AAAyDS,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { Keyboard, KeyboardStyle, KeyboardResize } from '@capacitor/keyboard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class KeyboardService {\n    constructor(router) {\n        this.router = router;\n        this.keyboardHeight$ = new BehaviorSubject(0);\n        this.routesWithCoveredKeyboard = ['/auth'];\n    }\n    async setInitSettings(platform, appWindow) {\n        if (!appWindow) {\n            return;\n        }\n        try {\n            this.actionListeners(platform, appWindow);\n            await Keyboard.setStyle({ style: KeyboardStyle.Light });\n            await Keyboard.setResizeMode({ mode: KeyboardResize.None });\n        }\n        catch (_a) {\n        }\n    }\n    actionListeners(platform, appWindow) {\n        Keyboard.addListener('keyboardWillShow', (event) => this.keyboardHeight$.next(event.keyboardHeight));\n        Keyboard.addListener('keyboardWillHide', () => this.keyboardHeight$.next(0));\n        this.keyboardHeight$.subscribe((height) => {\n            appWindow.el.style = `height: calc(100vh - ${height}px)`;\n            if (!this.routesWithCoveredKeyboard.includes(this.router.url)) {\n                setTimeout(() => { var _a; return (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth' }); }, 300);\n            }\n        });\n    }\n}\nKeyboardService.ɵfac = function KeyboardService_Factory(t) { return new (t || KeyboardService)(i0.ɵɵinject(i1.Router)); };\nKeyboardService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: KeyboardService, factory: KeyboardService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}