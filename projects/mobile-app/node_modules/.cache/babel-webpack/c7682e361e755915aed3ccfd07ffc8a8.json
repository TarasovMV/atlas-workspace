{"ast":null,"code":"import _asyncToGenerator from \"/Users/avsv/Documents/GitHub/atlas-workspace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { debounceTime, filter } from \"rxjs/operators\";\nimport { NavigationEnd } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let StatusBarService = /*#__PURE__*/(() => {\n  class StatusBarService {\n    constructor(router) {\n      this.router = router;\n      this.alternativePages = [];\n    }\n\n    init() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          yield StatusBar.setOverlaysWebView({\n            overlay: true\n          });\n        } catch (e) {\n          console.warn('Status bar not supported');\n        }\n\n        _this.router.events.pipe(filter(event => event instanceof NavigationEnd), debounceTime(100)).subscribe(x => _this.stateChecker(x.url));\n      })();\n    }\n\n    setDefaultColor() {\n      return _asyncToGenerator(function* () {\n        try {\n          yield StatusBar.setStyle({\n            style: Style.Dark\n          });\n        } catch (e) {\n          console.warn('Status bar not supported', 'DEFAULT');\n        }\n      })();\n    }\n\n    setAlternativeColor() {\n      return _asyncToGenerator(function* () {\n        try {\n          yield StatusBar.setStyle({\n            style: Style.Light\n          });\n        } catch (e) {\n          console.warn('Status bar not supported', 'ALTER');\n        }\n      })();\n    }\n\n    stateChecker(path) {\n      if (this.isAlternativePage(path)) {\n        this.setAlternativeColor().then();\n      } else {\n        this.setDefaultColor().then();\n      }\n    }\n\n    isAlternativePage(path) {\n      const checkPath = path.split('/').slice(-1)[0];\n      return this.alternativePages.includes(checkPath);\n    }\n\n  }\n\n  StatusBarService.ɵfac = function StatusBarService_Factory(t) {\n    return new (t || StatusBarService)(i0.ɵɵinject(i1.Router));\n  };\n\n  StatusBarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StatusBarService,\n    factory: StatusBarService.ɵfac,\n    providedIn: 'root'\n  });\n  return StatusBarService;\n})();","map":null,"metadata":{},"sourceType":"module"}