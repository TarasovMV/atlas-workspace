{"ast":null,"code":"import _asyncToGenerator from \"/Users/avsv/Documents/GitHub/atlas-workspace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PushNotifications } from '@capacitor/push-notifications';\nimport { Capacitor } from \"@capacitor/core\";\nimport { Storage } from '@capacitor/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/api-user.service\";\nexport class FcmService {\n  constructor(apiUserService) {\n    this.apiUserService = apiUserService;\n    this.fcmTokenRoute = 'fcm-token';\n  }\n\n  initPush() {\n    console.log('initPush');\n\n    if (Capacitor.getPlatform() === 'web') {\n      return;\n    }\n\n    this.registerPush();\n  }\n\n  sendFcmToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const res = yield Storage.get({\n        key: _this.fcmTokenRoute\n      });\n      const token = res.value;\n\n      if (!token) {\n        return;\n      }\n\n      yield _this.apiUserService.fcmTokenRegister(token);\n    })();\n  }\n\n  registerPush() {\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register().then();\n      } else {// Show some error\n      }\n    }); // On success, we should be able to receive notifications\n\n    PushNotifications.addListener('registration', token => {\n      console.log('Push registration success, token: ' + token.value);\n\n      if (token.value) {\n        Storage.set({\n          key: this.fcmTokenRoute,\n          value: token.value\n        }).then();\n      }\n    }); // Some issue with our setup and push will not work\n\n    PushNotifications.addListener('registrationError', error => {\n      console.log('Error on registration: ' + JSON.stringify(error));\n    }); // Show us the notification payload if the app is open on our device\n\n    PushNotifications.addListener('pushNotificationReceived', notification => {\n      console.log('Push received: ' + JSON.stringify(notification));\n    }); // Method called when tapping on a notification\n\n    PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n      console.log('Push action performed: ' + JSON.stringify(notification));\n    });\n  }\n\n}\n\nFcmService.ɵfac = function FcmService_Factory(t) {\n  return new (t || FcmService)(i0.ɵɵinject(i1.ApiUserService));\n};\n\nFcmService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FcmService,\n  factory: FcmService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/avsv/Documents/GitHub/atlas-workspace/projects/mobile-app/src/app/core/services/platform/fcm.service.ts"],"names":["PushNotifications","Capacitor","Storage","i0","i1","FcmService","constructor","apiUserService","fcmTokenRoute","initPush","console","log","getPlatform","registerPush","sendFcmToken","res","get","key","token","value","fcmTokenRegister","requestPermissions","then","result","receive","register","addListener","set","error","JSON","stringify","notification","ɵfac","FcmService_Factory","t","ɵɵinject","ApiUserService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { PushNotifications, } from '@capacitor/push-notifications';\nimport { Capacitor } from \"@capacitor/core\";\nimport { Storage } from '@capacitor/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/api-user.service\";\nexport class FcmService {\n    constructor(apiUserService) {\n        this.apiUserService = apiUserService;\n        this.fcmTokenRoute = 'fcm-token';\n    }\n    initPush() {\n        console.log('initPush');\n        if (Capacitor.getPlatform() === 'web') {\n            return;\n        }\n        this.registerPush();\n    }\n    async sendFcmToken() {\n        const res = await Storage.get({ key: this.fcmTokenRoute });\n        const token = res.value;\n        if (!token) {\n            return;\n        }\n        await this.apiUserService.fcmTokenRegister(token);\n    }\n    registerPush() {\n        // Request permission to use push notifications\n        // iOS will prompt user and return if they granted permission or not\n        // Android will just grant without prompting\n        PushNotifications.requestPermissions().then(result => {\n            if (result.receive === 'granted') {\n                // Register with Apple / Google to receive push via APNS/FCM\n                PushNotifications.register().then();\n            }\n            else {\n                // Show some error\n            }\n        });\n        // On success, we should be able to receive notifications\n        PushNotifications.addListener('registration', (token) => {\n            console.log('Push registration success, token: ' + token.value);\n            if (token.value) {\n                Storage.set({ key: this.fcmTokenRoute, value: token.value, }).then();\n            }\n        });\n        // Some issue with our setup and push will not work\n        PushNotifications.addListener('registrationError', (error) => {\n            console.log('Error on registration: ' + JSON.stringify(error));\n        });\n        // Show us the notification payload if the app is open on our device\n        PushNotifications.addListener('pushNotificationReceived', (notification) => {\n            console.log('Push received: ' + JSON.stringify(notification));\n        });\n        // Method called when tapping on a notification\n        PushNotifications.addListener('pushNotificationActionPerformed', (notification) => {\n            console.log('Push action performed: ' + JSON.stringify(notification));\n        });\n    }\n}\nFcmService.ɵfac = function FcmService_Factory(t) { return new (t || FcmService)(i0.ɵɵinject(i1.ApiUserService)); };\nFcmService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FcmService, factory: FcmService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}