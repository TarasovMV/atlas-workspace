{"ast":null,"code":"import _asyncToGenerator from \"/Users/avsv/Documents/GitHub/atlas-workspace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { NavigationStart } from \"@angular/router\";\nimport { filter } from \"rxjs/operators\";\nimport { App } from '@capacitor/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nexport let BackButtonService = /*#__PURE__*/(() => {\n  class BackButtonService {\n    constructor(navCtrl, platform, router, toastController) {\n      this.navCtrl = navCtrl;\n      this.platform = platform;\n      this.router = router;\n      this.toastController = toastController;\n      this.rootSubscription = undefined;\n      this.actionSubscription = undefined;\n      this.backCounter = 0;\n      this.routeCounter = 0;\n      this.rootPages = ['potential', 'activity', 'ideas', 'restrictions', 'tabs'];\n      this.router.events.pipe(filter(event => event instanceof NavigationStart)).subscribe(x => {\n        if (!this.routeCounter) {\n          this.routeCounter++;\n          return;\n        }\n\n        if (this.isRootPage(x.url)) {\n          this.disableBackOnRoot(this.platform);\n        } else {\n          this.clearOnRoot();\n          this.default(this.platform);\n        }\n      });\n    }\n\n    init(platform) {\n      this.disableBackOnRoot(platform);\n    }\n\n    default(platform) {\n      platform.backButton.subscribeWithPriority(9999, () => {\n        this.navCtrl.back();\n      });\n    }\n\n    actionOnBack(platform, action, isBack = true) {\n      this.rootSubscription = platform.backButton.subscribeWithPriority(9999, () => {\n        action();\n\n        if (isBack) {\n          this.navCtrl.back();\n        }\n      });\n    }\n\n    disableBackOnRoot(platform) {\n      this.rootSubscription = platform.backButton.subscribeWithPriority(9999, () => {\n        this.backCounter++;\n\n        if (this.backCounter === 2) {\n          App.exitApp();\n        } else {\n          this.showBackElseMessage().then();\n          setTimeout(() => this.backCounter = 0, 1500);\n        }\n      });\n    }\n\n    clearOnRoot() {\n      var _a;\n\n      if (!this.rootSubscription) {\n        return;\n      }\n\n      (_a = this.rootSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      this.rootSubscription = undefined;\n    }\n\n    clearAction() {\n      var _a;\n\n      if (!this.actionSubscription) {\n        return;\n      }\n\n      (_a = this.actionSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      this.actionSubscription = undefined;\n    }\n\n    showBackElseMessage() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const toast = yield _this.toastController.create({\n          message: 'Для выхода из приложения нажмите \"Назад\" еще раз',\n          duration: 1500,\n          cssClass: 'custom-toast'\n        });\n        yield toast.present();\n      })();\n    }\n\n    isRootPage(path) {\n      const checkPath = path.split('/').slice(-1)[0];\n\n      for (let page of this.rootPages) {\n        if (checkPath === page) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n  }\n\n  BackButtonService.ɵfac = function BackButtonService_Factory(t) {\n    return new (t || BackButtonService)(i0.ɵɵinject(i1.NavController), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i1.ToastController));\n  };\n\n  BackButtonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackButtonService,\n    factory: BackButtonService.ɵfac,\n    providedIn: 'root'\n  });\n  return BackButtonService;\n})();","map":null,"metadata":{},"sourceType":"module"}