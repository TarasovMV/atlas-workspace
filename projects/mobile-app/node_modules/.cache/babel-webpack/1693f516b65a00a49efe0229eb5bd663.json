{"ast":null,"code":"import _asyncToGenerator from \"/Users/avsv/Documents/GitHub/atlas-workspace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppConfigService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  loadAppConfig() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.appConfig = yield _this.http.get('assets/config.json').toPromise();\n    })();\n  }\n\n  getAttribute(key) {\n    if (!this.appConfig) {\n      console.error('Config file not found');\n    }\n\n    return this.appConfig[key];\n  }\n\n}\n\nAppConfigService.ɵfac = function AppConfigService_Factory(t) {\n  return new (t || AppConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAppConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppConfigService,\n  factory: AppConfigService.ɵfac,\n  providedIn: 'root'\n});\nexport const appConfigInit = appConfigService => /*#__PURE__*/_asyncToGenerator(function* () {\n  return yield appConfigService.loadAppConfig();\n});","map":{"version":3,"sources":["/Users/avsv/Documents/GitHub/atlas-workspace/projects/mobile-app/src/app/core/services/platform/app-config.service.ts"],"names":["i0","i1","AppConfigService","constructor","http","loadAppConfig","appConfig","get","toPromise","getAttribute","key","console","error","ɵfac","AppConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","appConfigInit","appConfigService"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACKC,EAAAA,aAAa,GAAG;AAAA;;AAAA;AAClB,MAAA,KAAI,CAACC,SAAL,SAAuB,KAAI,CAACF,IAAL,CAAUG,GAAV,CAAc,oBAAd,EAAoCC,SAApC,EAAvB;AADkB;AAErB;;AACDC,EAAAA,YAAY,CAACC,GAAD,EAAM;AACd,QAAI,CAAC,KAAKJ,SAAV,EAAqB;AACjBK,MAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd;AACH;;AACD,WAAO,KAAKN,SAAL,CAAeI,GAAf,CAAP;AACH;;AAZyB;;AAc9BR,gBAAgB,CAACW,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIb,gBAAV,EAA4BF,EAAE,CAACgB,QAAH,CAAYf,EAAE,CAACgB,UAAf,CAA5B,CAAP;AAAiE,CAAhI;;AACAf,gBAAgB,CAACgB,KAAjB,GAAyB,aAAclB,EAAE,CAACmB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElB,gBAAT;AAA2BmB,EAAAA,OAAO,EAAEnB,gBAAgB,CAACW,IAArD;AAA2DS,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC;AACA,OAAO,MAAMC,aAAa,GAAIC,gBAAD,mCAAsB;AAAA,eAAkBA,gBAAgB,CAACnB,aAAjB,EAAlB;AAAA,CAAtB,CAAtB","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppConfigService {\n    constructor(http) {\n        this.http = http;\n    }\n    async loadAppConfig() {\n        this.appConfig = await this.http.get('assets/config.json').toPromise();\n    }\n    getAttribute(key) {\n        if (!this.appConfig) {\n            console.error('Config file not found');\n        }\n        return this.appConfig[key];\n    }\n}\nAppConfigService.ɵfac = function AppConfigService_Factory(t) { return new (t || AppConfigService)(i0.ɵɵinject(i1.HttpClient)); };\nAppConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AppConfigService, factory: AppConfigService.ɵfac, providedIn: 'root' });\nexport const appConfigInit = (appConfigService) => async () => await appConfigService.loadAppConfig();\n"]},"metadata":{},"sourceType":"module"}