{"ast":null,"code":"import _asyncToGenerator from \"/Users/avsv/Documents/GitHub/atlas-workspace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { debounceTime, filter } from \"rxjs/operators\";\nimport { NavigationEnd } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class StatusBarService {\n  constructor(router) {\n    this.router = router;\n    this.alternativePages = ['tabs-offline', 'tabs-progress', 'tabs'];\n  }\n\n  init() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield StatusBar.setOverlaysWebView({\n          overlay: true\n        });\n      } catch (e) {\n        console.warn('Status bar not supported');\n      }\n\n      _this.router.events.pipe(filter(event => event instanceof NavigationEnd), debounceTime(100)).subscribe(x => _this.stateChecker(x.url));\n    })();\n  }\n\n  setDefaultColor() {\n    return _asyncToGenerator(function* () {\n      try {\n        yield StatusBar.setStyle({\n          style: Style.Dark\n        });\n      } catch (e) {\n        console.warn('Status bar not supported', 'DEFAULT');\n      }\n    })();\n  }\n\n  setAlternativeColor() {\n    return _asyncToGenerator(function* () {\n      try {\n        yield StatusBar.setStyle({\n          style: Style.Light\n        });\n      } catch (e) {\n        console.warn('Status bar not supported', 'ALTER');\n      }\n    })();\n  }\n\n  stateChecker(path) {\n    if (this.isAlternativePage(path)) {\n      this.setAlternativeColor().then();\n    } else {\n      this.setDefaultColor().then();\n    }\n  }\n\n  isAlternativePage(path) {\n    const checkPath = path.split('/').slice(-1)[0];\n    return this.alternativePages.includes(checkPath);\n  }\n\n}\n\nStatusBarService.ɵfac = function StatusBarService_Factory(t) {\n  return new (t || StatusBarService)(i0.ɵɵinject(i1.Router));\n};\n\nStatusBarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StatusBarService,\n  factory: StatusBarService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/avsv/Documents/GitHub/atlas-workspace/projects/mobile-app/src/app/core/services/platform/status-bar.service.ts"],"names":["StatusBar","Style","debounceTime","filter","NavigationEnd","i0","i1","StatusBarService","constructor","router","alternativePages","init","setOverlaysWebView","overlay","e","console","warn","events","pipe","event","subscribe","x","stateChecker","url","setDefaultColor","setStyle","style","Dark","setAlternativeColor","Light","path","isAlternativePage","then","checkPath","split","slice","includes","ɵfac","StatusBarService_Factory","t","ɵɵinject","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAiC,uBAAjC;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,gBAArC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,gBAAL,GAAwB,CACpB,cADoB,EAEpB,eAFoB,EAGpB,MAHoB,CAAxB;AAKH;;AACKC,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACT,UAAI;AACA,cAAMX,SAAS,CAACY,kBAAV,CAA6B;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAA7B,CAAN;AACH,OAFD,CAGA,OAAOC,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb;AACH;;AACD,MAAA,KAAI,CAACP,MAAL,CAAYQ,MAAZ,CACKC,IADL,CACUf,MAAM,CAACgB,KAAK,IAAIA,KAAK,YAAYf,aAA3B,CADhB,EAC2DF,YAAY,CAAC,GAAD,CADvE,EAEKkB,SAFL,CAEgBC,CAAD,IAAO,KAAI,CAACC,YAAL,CAAkBD,CAAC,CAACE,GAApB,CAFtB;AAPS;AAUZ;;AACKC,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAI;AACA,cAAMxB,SAAS,CAACyB,QAAV,CAAmB;AAAEC,UAAAA,KAAK,EAAEzB,KAAK,CAAC0B;AAAf,SAAnB,CAAN;AACH,OAFD,CAGA,OAAOb,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb,EAAyC,SAAzC;AACH;AANmB;AAOvB;;AACKY,EAAAA,mBAAmB,GAAG;AAAA;AACxB,UAAI;AACA,cAAM5B,SAAS,CAACyB,QAAV,CAAmB;AAAEC,UAAAA,KAAK,EAAEzB,KAAK,CAAC4B;AAAf,SAAnB,CAAN;AACH,OAFD,CAGA,OAAOf,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb,EAAyC,OAAzC;AACH;AANuB;AAO3B;;AACDM,EAAAA,YAAY,CAACQ,IAAD,EAAO;AACf,QAAI,KAAKC,iBAAL,CAAuBD,IAAvB,CAAJ,EAAkC;AAC9B,WAAKF,mBAAL,GAA2BI,IAA3B;AACH,KAFD,MAGK;AACD,WAAKR,eAAL,GAAuBQ,IAAvB;AACH;AACJ;;AACDD,EAAAA,iBAAiB,CAACD,IAAD,EAAO;AACpB,UAAMG,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,KAAhB,CAAsB,CAAC,CAAvB,EAA0B,CAA1B,CAAlB;AACA,WAAO,KAAKzB,gBAAL,CAAsB0B,QAAtB,CAA+BH,SAA/B,CAAP;AACH;;AA/CyB;;AAiD9B1B,gBAAgB,CAAC8B,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIhC,gBAAV,EAA4BF,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,MAAf,CAA5B,CAAP;AAA6D,CAA5H;;AACAlC,gBAAgB,CAACmC,KAAjB,GAAyB,aAAcrC,EAAE,CAACsC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,gBAAT;AAA2BsC,EAAAA,OAAO,EAAEtC,gBAAgB,CAAC8B,IAArD;AAA2DS,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC","sourcesContent":["import { StatusBar, Style } from '@capacitor/status-bar';\nimport { debounceTime, filter } from \"rxjs/operators\";\nimport { NavigationEnd } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class StatusBarService {\n    constructor(router) {\n        this.router = router;\n        this.alternativePages = [\n            'tabs-offline',\n            'tabs-progress',\n            'tabs',\n        ];\n    }\n    async init() {\n        try {\n            await StatusBar.setOverlaysWebView({ overlay: true });\n        }\n        catch (e) {\n            console.warn('Status bar not supported');\n        }\n        this.router.events\n            .pipe(filter(event => event instanceof NavigationEnd), debounceTime(100))\n            .subscribe((x) => this.stateChecker(x.url));\n    }\n    async setDefaultColor() {\n        try {\n            await StatusBar.setStyle({ style: Style.Dark });\n        }\n        catch (e) {\n            console.warn('Status bar not supported', 'DEFAULT');\n        }\n    }\n    async setAlternativeColor() {\n        try {\n            await StatusBar.setStyle({ style: Style.Light });\n        }\n        catch (e) {\n            console.warn('Status bar not supported', 'ALTER');\n        }\n    }\n    stateChecker(path) {\n        if (this.isAlternativePage(path)) {\n            this.setAlternativeColor().then();\n        }\n        else {\n            this.setDefaultColor().then();\n        }\n    }\n    isAlternativePage(path) {\n        const checkPath = path.split('/').slice(-1)[0];\n        return this.alternativePages.includes(checkPath);\n    }\n}\nStatusBarService.ɵfac = function StatusBarService_Factory(t) { return new (t || StatusBarService)(i0.ɵɵinject(i1.Router)); };\nStatusBarService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: StatusBarService, factory: StatusBarService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}